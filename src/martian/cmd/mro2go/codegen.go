//
// Copyright (c) 2017 10X Genomics, Inc. All rights reserved.
//

package main

import (
	"bytes"
	"go/format"
	"go/parser"
	"go/token"
	"io"
	"martian/syntax"
)

func makeGoRaw(ast *syntax.Ast, pkg, mroName, stageName string) string {
	var buffer bytes.Buffer
	buffer.WriteString("// Automatically generated by mro2go\n// source: ")
	buffer.WriteString(mroName)
	buffer.WriteString("\n\n")

	stages := getStages(ast, mroName, stageName)
	if pkg != "" {
		buffer.WriteString("package ")
		buffer.WriteString(pkg)
		buffer.WriteRune('\n')
		for i, stage := range stages {
			if stage.Split {
				buffer.WriteString(`
import (
`)
				for _, stage := range stages[i:] {
					if stage.Split &&
						len(stage.OutParams.List) > 0 &&
						len(stage.ChunkOuts.List) > 0 {
						buffer.WriteString("\t\"bytes\"\n")
						buffer.WriteString("\t\"encoding/json\"")
						break
					}
				}
				buffer.WriteString(`
	"martian/core"
)

`)
				break
			}
		}
	}
	for _, stage := range stages {
		writeStageStructs(&buffer, stage)
	}
	return buffer.String()
}

// Use gofmt to ensure proper formatting.
func gofmt(dest io.Writer, goSrc, outName string) error {
	fset := token.NewFileSet()
	if f, err := parser.ParseFile(fset, outName, goSrc,
		parser.ParseComments|parser.AllErrors); err != nil {
		dest.Write([]byte(goSrc))
		return err
	} else {
		return format.Node(dest, fset, f)
	}
}
